{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/Todolist.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","Todolist","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAyDeA,MAvDf,SAAkBC,GAAQ,IAAD,EACKC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MACvD,IAFiB,mBACdC,EADc,KACPC,EADO,KAIfC,EAAWC,iBAAO,MACxBC,qBAAU,WACNF,EAASG,QAAQC,WAErB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAWtB,OACI,sBAAMW,UAAU,YAAYC,SAVX,SAAAH,GACjBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAoB,IAAdD,KAAKE,UACpBC,KAAMjB,IAEVC,EAAS,KAGT,SACKL,EAAME,KACJ,qCACH,uBACAoB,KAAK,OACLC,YAAY,mBACZpB,MAAOC,EACPoB,KAAO,OACPV,UAAW,aACXW,SAAUd,EACVe,IAAKpB,IAEL,wBAAQQ,UAAU,cAAlB,uBAIE,qCACD,uBACGQ,KAAK,OACLC,YAAY,aACZpB,MAAOC,EACPoB,KAAO,OACPV,UAAW,aACXW,SAAUd,EACVe,IAAKpB,IAEL,wBAAQQ,UAAU,cAAlB,4B,sBCLDa,MAvCf,YAA6D,IAA9CC,EAA6C,EAA7CA,MAAMC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAAa,EACjC9B,mBAAS,CAC5BgB,GAAI,KACJd,MAAO,KAH6C,mBACjDD,EADiD,KAC5C8B,EAD4C,KAcxD,OAAI9B,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SATZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAGd,GACnB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QAORyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBACArB,UAAWoB,EAAKE,WAAa,oBAC7B,WAFA,UAGI,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKjB,KAApD,SACKiB,EAAKb,MADAa,EAAKjB,IAGf,sBAAKH,UAAU,QAAf,UACI,cAAC,IAAD,CACIuB,QAAU,kBAAMP,EAAWI,EAAKjB,KAChCH,UAAU,gBAEd,cAAC,IAAD,CACIuB,QAAU,kBAAKL,EAAQ,CAACf,GAAIiB,EAAKjB,GAAGd,MAAO+B,EAAKb,QAChDP,UAAW,mBAXNqB,OC2BVG,MAjDf,WAAqB,IAAD,EACSrC,mBAAS,IADlB,mBACT2B,EADS,KACHW,EADG,KAoChB,OACI,gCACI,0DACA,cAAC,EAAD,CAAUxB,SArCF,SAAAmB,GACZ,GAAIA,EAAKb,OAAO,QAAQmB,KAAKN,EAAKb,MAAlC,CAIA,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OA+BL,cAAC,EAAD,CACIb,MAAOA,EACPC,aAhBS,SAAAZ,GACjB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHGA,EAAKjB,KAAOA,IACXiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAUDZ,WAtBO,SAAAb,GACf,IAAM0B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKjB,KAAOA,KACxDsB,EAASI,IAqBDZ,WA/BO,SAACc,EAAQC,GACnBA,EAASzB,OAAO,QAAQmB,KAAKM,EAASzB,OAG3CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAK/B,KAAO4B,EAASC,EAAWE,e,MCP5DC,MARf,WACE,OACE,qBAAKnC,UAAU,UAAf,SACE,cAAC,EAAD,OCHNoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8af48920.chunk.js","sourcesContent":["import React,{useState, useEffect, useRef} from 'react'\r\n\r\nfunction TodoForm(props) { \r\n    const [input, setInput] = useState(props.edit ? props.edit.value: \r\n        \"\");  //*it is used to state the input \r\n\r\n    const inputRef = useRef(null) //*inputref would allow to keep the cursor in the form after rerender \r\n    useEffect(()=>{ \r\n        inputRef.current.focus()\r\n    })\r\n    const handleChange = e =>{ \r\n        setInput(e.target.value); //*changing the words in the text in the form \r\n    } \r\n    const handleSubmit = e =>{ \r\n        e.preventDefault(); \r\n        \r\n        props.onSubmit({ \r\n            id: Math.floor(Math.random()*10000), \r\n            text: input\r\n        });\r\n        setInput('');\r\n    } \r\n    return (\r\n        <form className=\"todo-form\" onSubmit={handleSubmit}> \r\n            {props.edit ? ( \r\n               <> \r\n            <input \r\n            type=\"text\" \r\n            placeholder=\"Update your item\" \r\n            value={input} \r\n            name = \"text\" \r\n            className =\"todo-input\" \r\n            onChange={handleChange} \r\n            ref={inputRef}\r\n            />\r\n            <button className=\"todo-button\">Update</button> \r\n              </> \r\n            ) :  \r\n            (\r\n              <>\r\n             <input \r\n                type=\"text\" \r\n                placeholder=\"Add a todo\" \r\n                value={input} \r\n                name = \"text\" \r\n                className =\"todo-input\" \r\n                onChange={handleChange} \r\n                ref={inputRef}\r\n                />\r\n                <button className=\"todo-button\">Add todo</button> \r\n                </> \r\n            )} \r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React,{useState} from 'react'; \r\nimport TodoForm from './TodoForm'; \r\nimport { RiCloseCircleLine } from 'react-icons/ri'; \r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nfunction Todo({todos,completeTodo, removeTodo, updateTodo}) { \r\n    const [edit,setEdit] = useState({ \r\n        id: null, \r\n        value: ''\r\n    }) \r\n\r\n    const submitUpdate = value => { \r\n        updateTodo(edit.id,value) \r\n        setEdit({\r\n            id: null, \r\n            value: ''\r\n        })\r\n    } \r\n    \r\n    if (edit.id){ \r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n    }\r\n    return todos.map((todo, index) =>(\r\n        <div\r\n        className={todo.isComplete ? 'todo-row complete' : \r\n        'todo-row'} key={index}>\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div> \r\n            <div className=\"icons\"> \r\n                <RiCloseCircleLine  \r\n                    onClick ={() => removeTodo(todo.id)} \r\n                    className='delete-icon'                \r\n                />\r\n                <TiEdit \r\n                    onClick ={() =>setEdit({id: todo.id,value: todo.text})} \r\n                    className =\"edit-icon\"  \r\n                />\r\n            </div>\r\n\r\n        </div> \r\n    ))\r\n}\r\n\r\nexport default Todo\r\n","import React,{useState} from 'react'; \r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo.js';\r\nfunction Todolist() { \r\n    const [todos,setTodos] = useState([]); \r\n    const addTodo = todo =>{ \r\n        if(!todo.text ||/^\\s*$/.test(todo.text)){ \r\n            return;  \r\n        } \r\n        \r\n        const newTodos = [todo, ...todos]; \r\n\r\n        setTodos(newTodos); \r\n    }; \r\n     \r\n\r\n    const updateTodo = (todoId, newValue) => { \r\n        if (!newValue.text ||/^\\s*$/.test(newValue.text)) { \r\n            return;\r\n        } \r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n    }; \r\n\r\n\r\n    const removeTodo = id =>{ \r\n        const removeArr = [...todos].filter(todo => todo.id !== id) \r\n        setTodos(removeArr); \r\n    };\r\n     \r\n    const completeTodo = id =>{ \r\n        let updatedTodos = todos.map(todo =>{ \r\n            if(todo.id === id){ \r\n                todo.isComplete = !todo.isComplete;\r\n            } \r\n            return todo\r\n        }); \r\n        setTodos(updatedTodos);\r\n    }\r\n\r\n    return (\r\n        <div> \r\n            <h1>What is your plan today?</h1>\r\n            <TodoForm onSubmit={addTodo}/> \r\n            <Todo  \r\n                todos={todos} \r\n                completeTodo={completeTodo}  \r\n                removeTodo = {removeTodo}  \r\n                updateTodo = {updateTodo}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default Todolist;\r\n","import react from 'react'; \nimport TodoForm from './components/TodoForm'; \nimport Todolist from './components/Todolist';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"Todoapp\">\n      <Todolist />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}